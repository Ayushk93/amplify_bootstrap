{"map":"{\"version\":3,\"sources\":[\"/home/ayush/Documents/react-boilerplate/node_modules/qr.js/lib/8BitByte.js\",\"/home/ayush/Documents/react-boilerplate/node_modules/qr.js/lib/RSBlock.js\",\"/home/ayush/Documents/react-boilerplate/node_modules/qr.js/lib/BitBuffer.js\",\"/home/ayush/Documents/react-boilerplate/node_modules/qr.js/lib/math.js\",\"/home/ayush/Documents/react-boilerplate/node_modules/qr.js/lib/QRCode.js\",\"/home/ayush/Documents/react-boilerplate/node_modules/qr.js/lib/Polynomial.js\",\"/home/ayush/Documents/react-boilerplate/node_modules/qr.js/lib/mode.js\",\"/home/ayush/Documents/react-boilerplate/node_modules/qr.js/lib/ErrorCorrectLevel.js\",\"/home/ayush/Documents/react-boilerplate/node_modules/qr.js/lib/util.js\"],\"names\":[\"mode\",\"__webpack_require__\",\"QR8bitByte\",\"data\",\"this\",\"MODE_8BIT_BYTE\",\"prototype\",\"getLength\",\"buffer\",\"length\",\"write\",\"i\",\"put\",\"charCodeAt\",\"module\",\"exports\",\"ECL\",\"QRRSBlock\",\"totalCount\",\"dataCount\",\"RS_BLOCK_TABLE\",\"getRSBlocks\",\"typeNumber\",\"errorCorrectLevel\",\"rsBlock\",\"getRsBlockTable\",\"undefined\",\"Error\",\"list\",\"Array\",\"count\",\"j\",\"push\",\"L\",\"M\",\"Q\",\"H\",\"QRBitBuffer\",\"get\",\"index\",\"bufIndex\",\"Math\",\"floor\",\"num\",\"putBit\",\"getLengthInBits\",\"bit\",\"QRMath\",\"glog\",\"n\",\"LOG_TABLE\",\"gexp\",\"EXP_TABLE\",\"BitByte\",\"RSBlock\",\"BitBuffer\",\"util\",\"Polynomial\",\"QRCode\",\"modules\",\"moduleCount\",\"dataCache\",\"dataList\",\"proto\",\"addData\",\"newData\",\"isDark\",\"row\",\"col\",\"getModuleCount\",\"make\",\"rsBlocks\",\"totalDataCount\",\"makeImpl\",\"getBestMaskPattern\",\"test\",\"maskPattern\",\"setupPositionProbePattern\",\"setupPositionAdjustPattern\",\"setupTimingPattern\",\"setupTypeInfo\",\"setupTypeNumber\",\"createData\",\"mapData\",\"r\",\"c\",\"minLostPoint\",\"pattern\",\"lostPoint\",\"getLostPoint\",\"createMovieClip\",\"target_mc\",\"instance_name\",\"depth\",\"qr_mc\",\"createEmptyMovieClip\",\"y\",\"x\",\"beginFill\",\"moveTo\",\"lineTo\",\"endFill\",\"pos\",\"getPatternPosition\",\"bits\",\"getBCHTypeNumber\",\"mod\",\"getBCHTypeInfo\",\"inc\",\"bitIndex\",\"byteIndex\",\"dark\",\"getMask\",\"PAD0\",\"PAD1\",\"createBytes\",\"offset\",\"maxDcCount\",\"maxEcCount\",\"dcdata\",\"ecdata\",\"dcCount\",\"ecCount\",\"max\",\"rsPoly\",\"getErrorCorrectPolynomial\",\"modPoly\",\"modIndex\",\"totalCodeCount\",\"math\",\"QRPolynomial\",\"shift\",\"multiply\",\"e\",\"ratio\",\"MODE_NUMBER\",\"MODE_ALPHA_NUM\",\"MODE_KANJI\",\"Mode\",\"QRMaskPattern\",\"QRUtil\",\"PATTERN_POSITION_TABLE\",\"G15\",\"G18\",\"G15_MASK\",\"d\",\"getBCHDigit\",\"digit\",\"errorCorrectLength\",\"a\",\"type\",\"qrCode\",\"sameCount\",\"darkCount\",\"abs\"],\"mappings\":\"iGAAA,IAAAA,EAAWC,EAAQ,wBAEnB,SAAAC,EAAAC,GACAC,KAAAJ,KAAAA,EAAAK,eACAD,KAAAD,KAAAA,EAGAD,EAAAI,UAAA,CAEAC,UAAA,SAAAC,GACA,OAAAJ,KAAAD,KAAAM,QAGAC,MAAA,SAAAF,GACA,IAAA,IAAAG,EAAA,EAAiBA,EAAAP,KAAAD,KAAAM,OAAsBE,IAEvCH,EAAAI,IAAAR,KAAAD,KAAAU,WAAAF,GAAA,KAKAG,EAAAC,QAAAb,0CCpBA,IAAAc,EAAUf,EAAQ,wBAElB,SAAAgB,EAAAC,EAAAC,GACAf,KAAAc,WAAAA,EACAd,KAAAe,UAAAA,EAGAF,EAAAG,eAAA,CAQA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAGA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,IAGA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IACA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAGA,CAAA,EAAA,IAAA,KACA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAGA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,IAGA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAGA,CAAA,EAAA,IAAA,KACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAGA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAGA,CAAA,EAAA,IAAA,GAAA,EAAA,IAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAGA,CAAA,EAAA,IAAA,KACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAGA,CAAA,EAAA,IAAA,GAAA,EAAA,IAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,GAAA,GAAA,IAGA,CAAA,EAAA,IAAA,GAAA,EAAA,IAAA,IACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,GAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAGA,CAAA,GAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IAAA,GAAA,IAAA,KACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAGA,CAAA,EAAA,IAAA,IAAA,GAAA,IAAA,KACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAGA,CAAA,GAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAGA,CAAA,GAAA,IAAA,KACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAGA,CAAA,GAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAGA,CAAA,GAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAGA,CAAA,GAAA,IAAA,IAAA,EAAA,IAAA,KACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAGA,CAAA,EAAA,IAAA,I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\",\"sourcesContent\":[\"var mode = require('./mode');\\n\\nfunction QR8bitByte(data) {\\n\\tthis.mode = mode.MODE_8BIT_BYTE;\\n\\tthis.data = data;\\n}\\n\\nQR8bitByte.prototype = {\\n\\n\\tgetLength : function(buffer) {\\n\\t\\treturn this.data.length;\\n\\t},\\n\\t\\n\\twrite : function(buffer) {\\n\\t\\tfor (var i = 0; i < this.data.length; i++) {\\n\\t\\t\\t// not JIS ...\\n\\t\\t\\tbuffer.put(this.data.charCodeAt(i), 8);\\n\\t\\t}\\n\\t}\\n};\\n\\nmodule.exports = QR8bitByte;\\n\\n\",\"// ErrorCorrectLevel\\nvar ECL = require('./ErrorCorrectLevel');\\n\\nfunction QRRSBlock(totalCount, dataCount) {\\n\\tthis.totalCount = totalCount;\\n\\tthis.dataCount  = dataCount;\\n}\\n\\nQRRSBlock.RS_BLOCK_TABLE = [\\n\\n\\t// L\\n\\t// M\\n\\t// Q\\n\\t// H\\n\\n\\t// 1\\n\\t[1, 26, 19],\\n\\t[1, 26, 16],\\n\\t[1, 26, 13],\\n\\t[1, 26, 9],\\n\\t\\n\\t// 2\\n\\t[1, 44, 34],\\n\\t[1, 44, 28],\\n\\t[1, 44, 22],\\n\\t[1, 44, 16],\\n\\n\\t// 3\\n\\t[1, 70, 55],\\n\\t[1, 70, 44],\\n\\t[2, 35, 17],\\n\\t[2, 35, 13],\\n\\n\\t// 4\\t\\t\\n\\t[1, 100, 80],\\n\\t[2, 50, 32],\\n\\t[2, 50, 24],\\n\\t[4, 25, 9],\\n\\t\\n\\t// 5\\n\\t[1, 134, 108],\\n\\t[2, 67, 43],\\n\\t[2, 33, 15, 2, 34, 16],\\n\\t[2, 33, 11, 2, 34, 12],\\n\\t\\n\\t// 6\\n\\t[2, 86, 68],\\n\\t[4, 43, 27],\\n\\t[4, 43, 19],\\n\\t[4, 43, 15],\\n\\t\\n\\t// 7\\t\\t\\n\\t[2, 98, 78],\\n\\t[4, 49, 31],\\n\\t[2, 32, 14, 4, 33, 15],\\n\\t[4, 39, 13, 1, 40, 14],\\n\\t\\n\\t// 8\\n\\t[2, 121, 97],\\n\\t[2, 60, 38, 2, 61, 39],\\n\\t[4, 40, 18, 2, 41, 19],\\n\\t[4, 40, 14, 2, 41, 15],\\n\\t\\n\\t// 9\\n\\t[2, 146, 116],\\n\\t[3, 58, 36, 2, 59, 37],\\n\\t[4, 36, 16, 4, 37, 17],\\n\\t[4, 36, 12, 4, 37, 13],\\n\\t\\n\\t// 10\\t\\t\\n\\t[2, 86, 68, 2, 87, 69],\\n\\t[4, 69, 43, 1, 70, 44],\\n\\t[6, 43, 19, 2, 44, 20],\\n\\t[6, 43, 15, 2, 44, 16],\\n\\n\\t// 11\\n\\t[4, 101, 81],\\n\\t[1, 80, 50, 4, 81, 51],\\n\\t[4, 50, 22, 4, 51, 23],\\n\\t[3, 36, 12, 8, 37, 13],\\n\\n\\t// 12\\n\\t[2, 116, 92, 2, 117, 93],\\n\\t[6, 58, 36, 2, 59, 37],\\n\\t[4, 46, 20, 6, 47, 21],\\n\\t[7, 42, 14, 4, 43, 15],\\n\\n\\t// 13\\n\\t[4, 133, 107],\\n\\t[8, 59, 37, 1, 60, 38],\\n\\t[8, 44, 20, 4, 45, 21],\\n\\t[12, 33, 11, 4, 34, 12],\\n\\n\\t// 14\\n\\t[3, 145, 115, 1, 146, 116],\\n\\t[4, 64, 40, 5, 65, 41],\\n\\t[11, 36, 16, 5, 37, 17],\\n\\t[11, 36, 12, 5, 37, 13],\\n\\n\\t// 15\\n\\t[5, 109, 87, 1, 110, 88],\\n\\t[5, 65, 41, 5, 66, 42],\\n\\t[5, 54, 24, 7, 55, 25],\\n\\t[11, 36, 12],\\n\\n\\t// 16\\n\\t[5, 122, 98, 1, 123, 99],\\n\\t[7, 73, 45, 3, 74, 46],\\n\\t[15, 43, 19, 2, 44, 20],\\n\\t[3, 45, 15, 13, 46, 16],\\n\\n\\t// 17\\n\\t[1, 135, 107, 5, 136, 108],\\n\\t[10, 74, 46, 1, 75, 47],\\n\\t[1, 50, 22, 15, 51, 23],\\n\\t[2, 42, 14, 17, 43, 15],\\n\\n\\t// 18\\n\\t[5, 150, 120, 1, 151, 121],\\n\\t[9, 69, 43, 4, 70, 44],\\n\\t[17, 50, 22, 1, 51, 23],\\n\\t[2, 42, 14, 19, 43, 15],\\n\\n\\t// 19\\n\\t[3, 141, 113, 4, 142, 114],\\n\\t[3, 70, 44, 11, 71, 45],\\n\\t[17, 47, 21, 4, 48, 22],\\n\\t[9, 39, 13, 16, 40, 14],\\n\\n\\t// 20\\n\\t[3, 135, 107, 5, 136, 108],\\n\\t[3, 67, 41, 13, 68, 42],\\n\\t[15, 54, 24, 5, 55, 25],\\n\\t[15, 43, 15, 10, 44, 16],\\n\\n\\t// 21\\n\\t[4, 144, 116, 4, 145, 117],\\n\\t[17, 68, 42],\\n\\t[17, 50, 22, 6, 51, 23],\\n\\t[19, 46, 16, 6, 47, 17],\\n\\n\\t// 22\\n\\t[2, 139, 111, 7, 140, 112],\\n\\t[17, 74, 46],\\n\\t[7, 54, 24, 16, 55, 25],\\n\\t[34, 37, 13],\\n\\n\\t// 23\\n\\t[4, 151, 121, 5, 152, 122],\\n\\t[4, 75, 47, 14, 76, 48],\\n\\t[11, 54, 24, 14, 55, 25],\\n\\t[16, 45, 15, 14, 46, 16],\\n\\n\\t// 24\\n\\t[6, 147, 117, 4, 148, 118],\\n\\t[6, 73, 45, 14, 74, 46],\\n\\t[11, 54, 24, 16, 55, 25],\\n\\t[30, 46, 16, 2, 47, 17],\\n\\n\\t// 25\\n\\t[8, 132, 106, 4, 133, 107],\\n\\t[8, 75, 47, 13, 76, 48],\\n\\t[7, 54, 24, 22, 55, 25],\\n\\t[22, 45, 15, 13, 46, 16],\\n\\n\\t// 26\\n\\t[10, 142, 114, 2, 143, 115],\\n\\t[19, 74, 46, 4, 75, 47],\\n\\t[28, 50, 22, 6, 51, 23],\\n\\t[33, 46, 16, 4, 47, 17],\\n\\n\\t// 27\\n\\t[8, 152, 122, 4, 153, 123],\\n\\t[22, 73, 45, 3, 74, 46],\\n\\t[8, 53, 23, 26, 54, 24],\\n\\t[12, 45, 15, 28, 46, 16],\\n\\n\\t// 28\\n\\t[3, 147, 117, 10, 148, 118],\\n\\t[3, 73, 45, 23, 74, 46],\\n\\t[4, 54, 24, 31, 55, 25],\\n\\t[11, 45, 15, 31, 46, 16],\\n\\n\\t// 29\\n\\t[7, 146, 116, 7, 147, 117],\\n\\t[21, 73, 45, 7, 74, 46],\\n\\t[1, 53, 23, 37, 54, 24],\\n\\t[19, 45, 15, 26, 46, 16],\\n\\n\\t// 30\\n\\t[5, 145, 115, 10, 146, 116],\\n\\t[19, 75, 47, 10, 76, 48],\\n\\t[15, 54, 24, 25, 55, 25],\\n\\t[23, 45, 15, 25, 46, 16],\\n\\n\\t// 31\\n\\t[13, 145, 115, 3, 146, 116],\\n\\t[2, 74, 46, 29, 75, 47],\\n\\t[42, 54, 24, 1, 55, 25],\\n\\t[23, 45, 15, 28, 46, 16],\\n\\n\\t// 32\\n\\t[17, 145, 115],\\n\\t[10, 74, 46, 23, 75, 47],\\n\\t[10, 54, 24, 35, 55, 25],\\n\\t[19, 45, 15, 35, 46, 16],\\n\\n\\t// 33\\n\\t[17, 145, 115, 1, 146, 116],\\n\\t[14, 74, 46, 21, 75, 47],\\n\\t[29, 54, 24, 19, 55, 25],\\n\\t[11, 45, 15, 46, 46, 16],\\n\\n\\t// 34\\n\\t[13, 145, 115, 6, 146, 116],\\n\\t[14, 74, 46, 23, 75, 47],\\n\\t[44, 54, 24, 7, 55, 25],\\n\\t[59, 46, 16, 1, 47, 17],\\n\\n\\t// 35\\n\\t[12, 151, 121, 7, 152, 122],\\n\\t[12, 75, 47, 26, 76, 48],\\n\\t[39, 54, 24, 14, 55, 25],\\n\\t[22, 45, 15, 41, 46, 16],\\n\\n\\t// 36\\n\\t[6, 151, 121, 14, 152, 122],\\n\\t[6, 75, 47, 34, 76, 48],\\n\\t[46, 54, 24, 10, 55, 25],\\n\\t[2, 45, 15, 64, 46, 16],\\n\\n\\t// 37\\n\\t[17, 152, 122, 4, 153, 123],\\n\\t[29, 74, 46, 14, 75, 47],\\n\\t[49, 54, 24, 10, 55, 25],\\n\\t[24, 45, 15, 46, 46, 16],\\n\\n\\t// 38\\n\\t[4, 152, 122, 18, 153, 123],\\n\\t[13, 74, 46, 32, 75, 47],\\n\\t[48, 54, 24, 14, 55, 25],\\n\\t[42, 45, 15, 32, 46, 16],\\n\\n\\t// 39\\n\\t[20, 147, 117, 4, 148, 118],\\n\\t[40, 75, 47, 7, 76, 48],\\n\\t[43, 54, 24, 22, 55, 25],\\n\\t[10, 45, 15, 67, 46, 16],\\n\\n\\t// 40\\n\\t[19, 148, 118, 6, 149, 119],\\n\\t[18, 75, 47, 31, 76, 48],\\n\\t[34, 54, 24, 34, 55, 25],\\n\\t[20, 45, 15, 61, 46, 16]\\n];\\n\\nQRRSBlock.getRSBlocks = function(typeNumber, errorCorrectLevel) {\\n\\t\\n\\tvar rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\\n\\t\\n\\tif (rsBlock == undefined) {\\n\\t\\tthrow new Error(\\\"bad rs block @ typeNumber:\\\" + typeNumber + \\\"/errorCorrectLevel:\\\" + errorCorrectLevel);\\n\\t}\\n\\n\\tvar length = rsBlock.length / 3;\\n\\t\\n\\tvar list = new Array();\\n\\t\\n\\tfor (var i = 0; i < length; i++) {\\n\\n\\t\\tvar count = rsBlock[i * 3 + 0];\\n\\t\\tvar totalCount = rsBlock[i * 3 + 1];\\n\\t\\tvar dataCount  = rsBlock[i * 3 + 2];\\n\\n\\t\\tfor (var j = 0; j < count; j++) {\\n\\t\\t\\tlist.push(new QRRSBlock(totalCount, dataCount) );\\t\\n\\t\\t}\\n\\t}\\n\\t\\n\\treturn list;\\n}\\n\\nQRRSBlock.getRsBlockTable = function(typeNumber, errorCorrectLevel) {\\n\\n\\tswitch(errorCorrectLevel) {\\n\\tcase ECL.L :\\n\\t\\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\\n\\tcase ECL.M :\\n\\t\\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\\n\\tcase ECL.Q :\\n\\t\\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\\n\\tcase ECL.H :\\n\\t\\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\\n\\tdefault :\\n\\t\\treturn undefined;\\n\\t}\\n}\\n\\nmodule.exports = QRRSBlock;\\n\",\"function QRBitBuffer() {\\n\\tthis.buffer = new Array();\\n\\tthis.length = 0;\\n}\\n\\nQRBitBuffer.prototype = {\\n\\n\\tget : function(index) {\\n\\t\\tvar bufIndex = Math.floor(index / 8);\\n\\t\\treturn ( (this.buffer[bufIndex] >>> (7 - index % 8) ) & 1) == 1;\\n\\t},\\n\\t\\n\\tput : function(num, length) {\\n\\t\\tfor (var i = 0; i < length; i++) {\\n\\t\\t\\tthis.putBit( ( (num >>> (length - i - 1) ) & 1) == 1);\\n\\t\\t}\\n\\t},\\n\\t\\n\\tgetLengthInBits : function() {\\n\\t\\treturn this.length;\\n\\t},\\n\\t\\n\\tputBit : function(bit) {\\n\\t\\n\\t\\tvar bufIndex = Math.floor(this.length / 8);\\n\\t\\tif (this.buffer.length <= bufIndex) {\\n\\t\\t\\tthis.buffer.push(0);\\n\\t\\t}\\n\\t\\n\\t\\tif (bit) {\\n\\t\\t\\tthis.buffer[bufIndex] |= (0x80 >>> (this.length % 8) );\\n\\t\\t}\\n\\t\\n\\t\\tthis.length++;\\n\\t}\\n};\\n\\nmodule.exports = QRBitBuffer;\\n\",\"var QRMath = {\\n\\n\\tglog : function(n) {\\n\\t\\n\\t\\tif (n < 1) {\\n\\t\\t\\tthrow new Error(\\\"glog(\\\" + n + \\\")\\\");\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn QRMath.LOG_TABLE[n];\\n\\t},\\n\\t\\n\\tgexp : function(n) {\\n\\t\\n\\t\\twhile (n < 0) {\\n\\t\\t\\tn += 255;\\n\\t\\t}\\n\\t\\n\\t\\twhile (n >= 256) {\\n\\t\\t\\tn -= 255;\\n\\t\\t}\\n\\t\\n\\t\\treturn QRMath.EXP_TABLE[n];\\n\\t},\\n\\t\\n\\tEXP_TABLE : new Array(256),\\n\\t\\n\\tLOG_TABLE : new Array(256)\\n\\n};\\n\\t\\nfor (var i = 0; i < 8; i++) {\\n\\tQRMath.EXP_TABLE[i] = 1 << i;\\n}\\nfor (var i = 8; i < 256; i++) {\\n\\tQRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4]\\n\\t\\t^ QRMath.EXP_TABLE[i - 5]\\n\\t\\t^ QRMath.EXP_TABLE[i - 6]\\n\\t\\t^ QRMath.EXP_TABLE[i - 8];\\n}\\nfor (var i = 0; i < 255; i++) {\\n\\tQRMath.LOG_TABLE[QRMath.EXP_TABLE[i] ] = i;\\n}\\n\\nmodule.exports = QRMath;\\n\",\"var BitByte = require('./8BitByte');\\nvar RSBlock = require('./RSBlock');\\nvar BitBuffer = require('./BitBuffer');\\nvar util = require('./util');\\nvar Polynomial = require('./Polynomial');\\n\\nfunction QRCode(typeNumber, errorCorrectLevel) {\\n\\tthis.typeNumber = typeNumber;\\n\\tthis.errorCorrectLevel = errorCorrectLevel;\\n\\tthis.modules = null;\\n\\tthis.moduleCount = 0;\\n\\tthis.dataCache = null;\\n\\tthis.dataList = [];\\n}\\n\\n// for client side minification\\nvar proto = QRCode.prototype;\\n\\nproto.addData = function(data) {\\n\\tvar newData = new BitByte(data);\\n\\tthis.dataList.push(newData);\\n\\tthis.dataCache = null;\\n};\\n\\nproto.isDark = function(row, col) {\\n\\tif (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\\n\\t\\tthrow new Error(row + \\\",\\\" + col);\\n\\t}\\n\\treturn this.modules[row][col];\\n};\\n\\nproto.getModuleCount = function() {\\n\\treturn this.moduleCount;\\n};\\n\\nproto.make = function() {\\n\\t// Calculate automatically typeNumber if provided is < 1\\n\\tif (this.typeNumber < 1 ){\\n\\t\\tvar typeNumber = 1;\\n\\t\\tfor (typeNumber = 1; typeNumber < 40; typeNumber++) {\\n\\t\\t\\tvar rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);\\n\\n\\t\\t\\tvar buffer = new BitBuffer();\\n\\t\\t\\tvar totalDataCount = 0;\\n\\t\\t\\tfor (var i = 0; i < rsBlocks.length; i++) {\\n\\t\\t\\t\\ttotalDataCount += rsBlocks[i].dataCount;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor (var i = 0; i < this.dataList.length; i++) {\\n\\t\\t\\t\\tvar data = this.dataList[i];\\n\\t\\t\\t\\tbuffer.put(data.mode, 4);\\n\\t\\t\\t\\tbuffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber) );\\n\\t\\t\\t\\tdata.write(buffer);\\n\\t\\t\\t}\\n\\t\\t\\tif (buffer.getLengthInBits() <= totalDataCount * 8)\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tthis.typeNumber = typeNumber;\\n\\t}\\n\\tthis.makeImpl(false, this.getBestMaskPattern() );\\n};\\n\\nproto.makeImpl = function(test, maskPattern) {\\n\\t\\n\\tthis.moduleCount = this.typeNumber * 4 + 17;\\n\\tthis.modules = new Array(this.moduleCount);\\n\\t\\n\\tfor (var row = 0; row < this.moduleCount; row++) {\\n\\t\\t\\n\\t\\tthis.modules[row] = new Array(this.moduleCount);\\n\\t\\t\\n\\t\\tfor (var col = 0; col < this.moduleCount; col++) {\\n\\t\\t\\tthis.modules[row][col] = null;//(col + row) % 3;\\n\\t\\t}\\n\\t}\\n\\n\\tthis.setupPositionProbePattern(0, 0);\\n\\tthis.setupPositionProbePattern(this.moduleCount - 7, 0);\\n\\tthis.setupPositionProbePattern(0, this.moduleCount - 7);\\n\\tthis.setupPositionAdjustPattern();\\n\\tthis.setupTimingPattern();\\n\\tthis.setupTypeInfo(test, maskPattern);\\n\\t\\n\\tif (this.typeNumber >= 7) {\\n\\t\\tthis.setupTypeNumber(test);\\n\\t}\\n\\n\\tif (this.dataCache == null) {\\n\\t\\tthis.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\\n\\t}\\n\\n\\tthis.mapData(this.dataCache, maskPattern);\\n};\\n\\nproto.setupPositionProbePattern = function(row, col)  {\\n\\t\\n\\tfor (var r = -1; r <= 7; r++) {\\n\\t\\t\\n\\t\\tif (row + r <= -1 || this.moduleCount <= row + r) continue;\\n\\t\\t\\n\\t\\tfor (var c = -1; c <= 7; c++) {\\n\\t\\t\\t\\n\\t\\t\\tif (col + c <= -1 || this.moduleCount <= col + c) continue;\\n\\t\\t\\t\\n\\t\\t\\tif ( (0 <= r && r <= 6 && (c == 0 || c == 6) )\\n\\t\\t\\t\\t\\t|| (0 <= c && c <= 6 && (r == 0 || r == 6) )\\n\\t\\t\\t\\t\\t|| (2 <= r && r <= 4 && 2 <= c && c <= 4) ) {\\n\\t\\t\\t\\tthis.modules[row + r][col + c] = true;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.modules[row + r][col + c] = false;\\n\\t\\t\\t}\\n\\t\\t}\\t\\t\\n\\t}\\t\\t\\n};\\n\\nproto.getBestMaskPattern = function() {\\n\\n\\tvar minLostPoint = 0;\\n\\tvar pattern = 0;\\n\\n\\tfor (var i = 0; i < 8; i++) {\\n\\t\\t\\n\\t\\tthis.makeImpl(true, i);\\n\\n\\t\\tvar lostPoint = util.getLostPoint(this);\\n\\n\\t\\tif (i == 0 || minLostPoint >  lostPoint) {\\n\\t\\t\\tminLostPoint = lostPoint;\\n\\t\\t\\tpattern = i;\\n\\t\\t}\\n\\t}\\n\\n\\treturn pattern;\\n};\\n\\nproto.createMovieClip = function(target_mc, instance_name, depth) {\\n\\n\\tvar qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\\n\\tvar cs = 1;\\n\\n\\tthis.make();\\n\\n\\tfor (var row = 0; row < this.modules.length; row++) {\\n\\t\\t\\n\\t\\tvar y = row * cs;\\n\\t\\t\\n\\t\\tfor (var col = 0; col < this.modules[row].length; col++) {\\n\\n\\t\\t\\tvar x = col * cs;\\n\\t\\t\\tvar dark = this.modules[row][col];\\n\\t\\t\\n\\t\\t\\tif (dark) {\\n\\t\\t\\t\\tqr_mc.beginFill(0, 100);\\n\\t\\t\\t\\tqr_mc.moveTo(x, y);\\n\\t\\t\\t\\tqr_mc.lineTo(x + cs, y);\\n\\t\\t\\t\\tqr_mc.lineTo(x + cs, y + cs);\\n\\t\\t\\t\\tqr_mc.lineTo(x, y + cs);\\n\\t\\t\\t\\tqr_mc.endFill();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\treturn qr_mc;\\n};\\n\\nproto.setupTimingPattern = function() {\\n\\t\\n\\tfor (var r = 8; r < this.moduleCount - 8; r++) {\\n\\t\\tif (this.modules[r][6] != null) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tthis.modules[r][6] = (r % 2 == 0);\\n\\t}\\n\\n\\tfor (var c = 8; c < this.moduleCount - 8; c++) {\\n\\t\\tif (this.modules[6][c] != null) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tthis.modules[6][c] = (c % 2 == 0);\\n\\t}\\n};\\n\\nproto.setupPositionAdjustPattern = function() {\\n\\n\\tvar pos = util.getPatternPosition(this.typeNumber);\\n\\t\\n\\tfor (var i = 0; i < pos.length; i++) {\\n\\t\\n\\t\\tfor (var j = 0; j < pos.length; j++) {\\n\\t\\t\\n\\t\\t\\tvar row = pos[i];\\n\\t\\t\\tvar col = pos[j];\\n\\t\\t\\t\\n\\t\\t\\tif (this.modules[row][col] != null) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tfor (var r = -2; r <= 2; r++) {\\n\\t\\t\\t\\n\\t\\t\\t\\tfor (var c = -2; c <= 2; c++) {\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tif (r == -2 || r == 2 || c == -2 || c == 2\\n\\t\\t\\t\\t\\t\\t\\t|| (r == 0 && c == 0) ) {\\n\\t\\t\\t\\t\\t\\tthis.modules[row + r][col + c] = true;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tthis.modules[row + r][col + c] = false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n};\\n\\nproto.setupTypeNumber = function(test) {\\n\\n\\tvar bits = util.getBCHTypeNumber(this.typeNumber);\\n\\n\\tfor (var i = 0; i < 18; i++) {\\n\\t\\tvar mod = (!test && ( (bits >> i) & 1) == 1);\\n\\t\\tthis.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\\n\\t}\\n\\n\\tfor (var i = 0; i < 18; i++) {\\n\\t\\tvar mod = (!test && ( (bits >> i) & 1) == 1);\\n\\t\\tthis.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\\n\\t}\\n};\\n\\nproto.setupTypeInfo = function(test, maskPattern) {\\n\\n\\tvar data = (this.errorCorrectLevel << 3) | maskPattern;\\n\\tvar bits = util.getBCHTypeInfo(data);\\n\\n\\t// vertical\\t\\t\\n\\tfor (var i = 0; i < 15; i++) {\\n\\n\\t\\tvar mod = (!test && ( (bits >> i) & 1) == 1);\\n\\n\\t\\tif (i < 6) {\\n\\t\\t\\tthis.modules[i][8] = mod;\\n\\t\\t} else if (i < 8) {\\n\\t\\t\\tthis.modules[i + 1][8] = mod;\\n\\t\\t} else {\\n\\t\\t\\tthis.modules[this.moduleCount - 15 + i][8] = mod;\\n\\t\\t}\\n\\t}\\n\\n\\t// horizontal\\n\\tfor (var i = 0; i < 15; i++) {\\n\\n\\t\\tvar mod = (!test && ( (bits >> i) & 1) == 1);\\n\\t\\t\\n\\t\\tif (i < 8) {\\n\\t\\t\\tthis.modules[8][this.moduleCount - i - 1] = mod;\\n\\t\\t} else if (i < 9) {\\n\\t\\t\\tthis.modules[8][15 - i - 1 + 1] = mod;\\n\\t\\t} else {\\n\\t\\t\\tthis.modules[8][15 - i - 1] = mod;\\n\\t\\t}\\n\\t}\\n\\n\\t// fixed module\\n\\tthis.modules[this.moduleCount - 8][8] = (!test);\\n};\\n\\nproto.mapData = function(data, maskPattern) {\\n\\t\\n\\tvar inc = -1;\\n\\tvar row = this.moduleCount - 1;\\n\\tvar bitIndex = 7;\\n\\tvar byteIndex = 0;\\n\\t\\n\\tfor (var col = this.moduleCount - 1; col > 0; col -= 2) {\\n\\n\\t\\tif (col == 6) col--;\\n\\n\\t\\twhile (true) {\\n\\n\\t\\t\\tfor (var c = 0; c < 2; c++) {\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tif (this.modules[row][col - c] == null) {\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tvar dark = false;\\n\\n\\t\\t\\t\\t\\tif (byteIndex < data.length) {\\n\\t\\t\\t\\t\\t\\tdark = ( ( (data[byteIndex] >>> bitIndex) & 1) == 1);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tvar mask = util.getMask(maskPattern, row, col - c);\\n\\n\\t\\t\\t\\t\\tif (mask) {\\n\\t\\t\\t\\t\\t\\tdark = !dark;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tthis.modules[row][col - c] = dark;\\n\\t\\t\\t\\t\\tbitIndex--;\\n\\n\\t\\t\\t\\t\\tif (bitIndex == -1) {\\n\\t\\t\\t\\t\\t\\tbyteIndex++;\\n\\t\\t\\t\\t\\t\\tbitIndex = 7;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\trow += inc;\\n\\n\\t\\t\\tif (row < 0 || this.moduleCount <= row) {\\n\\t\\t\\t\\trow -= inc;\\n\\t\\t\\t\\tinc = -inc;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n};\\n\\nQRCode.PAD0 = 0xEC;\\nQRCode.PAD1 = 0x11;\\n\\nQRCode.createData = function(typeNumber, errorCorrectLevel, dataList) {\\n\\t\\n\\tvar rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\\n\\t\\n\\tvar buffer = new BitBuffer();\\n\\t\\n\\tfor (var i = 0; i < dataList.length; i++) {\\n\\t\\tvar data = dataList[i];\\n\\t\\tbuffer.put(data.mode, 4);\\n\\t\\tbuffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber) );\\n\\t\\tdata.write(buffer);\\n\\t}\\n\\n\\t// calc num max data.\\n\\tvar totalDataCount = 0;\\n\\tfor (var i = 0; i < rsBlocks.length; i++) {\\n\\t\\ttotalDataCount += rsBlocks[i].dataCount;\\n\\t}\\n\\n\\tif (buffer.getLengthInBits() > totalDataCount * 8) {\\n\\t\\tthrow new Error(\\\"code length overflow. (\\\"\\n\\t\\t\\t+ buffer.getLengthInBits()\\n\\t\\t\\t+ \\\">\\\"\\n\\t\\t\\t+  totalDataCount * 8\\n\\t\\t\\t+ \\\")\\\");\\n\\t}\\n\\n\\t// end code\\n\\tif (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\\n\\t\\tbuffer.put(0, 4);\\n\\t}\\n\\n\\t// padding\\n\\twhile (buffer.getLengthInBits() % 8 != 0) {\\n\\t\\tbuffer.putBit(false);\\n\\t}\\n\\n\\t// padding\\n\\twhile (true) {\\n\\t\\t\\n\\t\\tif (buffer.getLengthInBits() >= totalDataCount * 8) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tbuffer.put(QRCode.PAD0, 8);\\n\\t\\t\\n\\t\\tif (buffer.getLengthInBits() >= totalDataCount * 8) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tbuffer.put(QRCode.PAD1, 8);\\n\\t}\\n\\n\\treturn QRCode.createBytes(buffer, rsBlocks);\\n};\\n\\nQRCode.createBytes = function(buffer, rsBlocks) {\\n\\n\\tvar offset = 0;\\n\\t\\n\\tvar maxDcCount = 0;\\n\\tvar maxEcCount = 0;\\n\\t\\n\\tvar dcdata = new Array(rsBlocks.length);\\n\\tvar ecdata = new Array(rsBlocks.length);\\n\\t\\n\\tfor (var r = 0; r < rsBlocks.length; r++) {\\n\\n\\t\\tvar dcCount = rsBlocks[r].dataCount;\\n\\t\\tvar ecCount = rsBlocks[r].totalCount - dcCount;\\n\\n\\t\\tmaxDcCount = Math.max(maxDcCount, dcCount);\\n\\t\\tmaxEcCount = Math.max(maxEcCount, ecCount);\\n\\t\\t\\n\\t\\tdcdata[r] = new Array(dcCount);\\n\\t\\t\\n\\t\\tfor (var i = 0; i < dcdata[r].length; i++) {\\n\\t\\t\\tdcdata[r][i] = 0xff & buffer.buffer[i + offset];\\n\\t\\t}\\n\\t\\toffset += dcCount;\\n\\t\\t\\n\\t\\tvar rsPoly = util.getErrorCorrectPolynomial(ecCount);\\n\\t\\tvar rawPoly = new Polynomial(dcdata[r], rsPoly.getLength() - 1);\\n\\n\\t\\tvar modPoly = rawPoly.mod(rsPoly);\\n\\t\\tecdata[r] = new Array(rsPoly.getLength() - 1);\\n\\t\\tfor (var i = 0; i < ecdata[r].length; i++) {\\n            var modIndex = i + modPoly.getLength() - ecdata[r].length;\\n\\t\\t\\tecdata[r][i] = (modIndex >= 0)? modPoly.get(modIndex) : 0;\\n\\t\\t}\\n\\n\\t}\\n\\t\\n\\tvar totalCodeCount = 0;\\n\\tfor (var i = 0; i < rsBlocks.length; i++) {\\n\\t\\ttotalCodeCount += rsBlocks[i].totalCount;\\n\\t}\\n\\n\\tvar data = new Array(totalCodeCount);\\n\\tvar index = 0;\\n\\n\\tfor (var i = 0; i < maxDcCount; i++) {\\n\\t\\tfor (var r = 0; r < rsBlocks.length; r++) {\\n\\t\\t\\tif (i < dcdata[r].length) {\\n\\t\\t\\t\\tdata[index++] = dcdata[r][i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfor (var i = 0; i < maxEcCount; i++) {\\n\\t\\tfor (var r = 0; r < rsBlocks.length; r++) {\\n\\t\\t\\tif (i < ecdata[r].length) {\\n\\t\\t\\t\\tdata[index++] = ecdata[r][i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn data;\\n};\\n\\nmodule.exports = QRCode;\\n\\n\",\"var math = require('./math');\\n\\nfunction QRPolynomial(num, shift) {\\n\\n\\tif (num.length == undefined) {\\n\\t\\tthrow new Error(num.length + \\\"/\\\" + shift);\\n\\t}\\n\\n\\tvar offset = 0;\\n\\n\\twhile (offset < num.length && num[offset] == 0) {\\n\\t\\toffset++;\\n\\t}\\n\\n\\tthis.num = new Array(num.length - offset + shift);\\n\\tfor (var i = 0; i < num.length - offset; i++) {\\n\\t\\tthis.num[i] = num[i + offset];\\n\\t}\\n}\\n\\nQRPolynomial.prototype = {\\n\\n\\tget : function(index) {\\n\\t\\treturn this.num[index];\\n\\t},\\n\\t\\n\\tgetLength : function() {\\n\\t\\treturn this.num.length;\\n\\t},\\n\\t\\n\\tmultiply : function(e) {\\n\\t\\n\\t\\tvar num = new Array(this.getLength() + e.getLength() - 1);\\n\\t\\n\\t\\tfor (var i = 0; i < this.getLength(); i++) {\\n\\t\\t\\tfor (var j = 0; j < e.getLength(); j++) {\\n\\t\\t\\t\\tnum[i + j] ^= math.gexp(math.glog(this.get(i) ) + math.glog(e.get(j) ) );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\n\\t\\treturn new QRPolynomial(num, 0);\\n\\t},\\n\\t\\n\\tmod : function(e) {\\n\\t\\n\\t\\tif (this.getLength() - e.getLength() < 0) {\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\t\\n\\t\\tvar ratio = math.glog(this.get(0) ) - math.glog(e.get(0) );\\n\\t\\n\\t\\tvar num = new Array(this.getLength() );\\n\\t\\t\\n\\t\\tfor (var i = 0; i < this.getLength(); i++) {\\n\\t\\t\\tnum[i] = this.get(i);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfor (var i = 0; i < e.getLength(); i++) {\\n\\t\\t\\tnum[i] ^= math.gexp(math.glog(e.get(i) ) + ratio);\\n\\t\\t}\\n\\t\\n\\t\\t// recursive call\\n\\t\\treturn new QRPolynomial(num, 0).mod(e);\\n\\t}\\n};\\n\\nmodule.exports = QRPolynomial;\\n\",\"module.exports = {\\n\\tMODE_NUMBER :\\t\\t1 << 0,\\n\\tMODE_ALPHA_NUM : \\t1 << 1,\\n\\tMODE_8BIT_BYTE : \\t1 << 2,\\n\\tMODE_KANJI :\\t\\t1 << 3\\n};\\n\",\"module.exports = {\\n\\tL : 1,\\n\\tM : 0,\\n\\tQ : 3,\\n\\tH : 2\\n};\\n\\n\",\"var Mode = require('./mode');\\nvar Polynomial = require('./Polynomial');\\nvar math = require('./math');\\n\\nvar QRMaskPattern = {\\n\\tPATTERN000 : 0,\\n\\tPATTERN001 : 1,\\n\\tPATTERN010 : 2,\\n\\tPATTERN011 : 3,\\n\\tPATTERN100 : 4,\\n\\tPATTERN101 : 5,\\n\\tPATTERN110 : 6,\\n\\tPATTERN111 : 7\\n};\\n\\nvar QRUtil = {\\n\\n    PATTERN_POSITION_TABLE : [\\n\\t    [],\\n\\t    [6, 18],\\n\\t    [6, 22],\\n\\t    [6, 26],\\n\\t    [6, 30],\\n\\t    [6, 34],\\n\\t    [6, 22, 38],\\n\\t    [6, 24, 42],\\n\\t    [6, 26, 46],\\n\\t    [6, 28, 50],\\n\\t    [6, 30, 54],\\t\\t\\n\\t    [6, 32, 58],\\n\\t    [6, 34, 62],\\n\\t    [6, 26, 46, 66],\\n\\t    [6, 26, 48, 70],\\n\\t    [6, 26, 50, 74],\\n\\t    [6, 30, 54, 78],\\n\\t    [6, 30, 56, 82],\\n\\t    [6, 30, 58, 86],\\n\\t    [6, 34, 62, 90],\\n\\t    [6, 28, 50, 72, 94],\\n\\t    [6, 26, 50, 74, 98],\\n\\t    [6, 30, 54, 78, 102],\\n\\t    [6, 28, 54, 80, 106],\\n\\t    [6, 32, 58, 84, 110],\\n\\t    [6, 30, 58, 86, 114],\\n\\t    [6, 34, 62, 90, 118],\\n\\t    [6, 26, 50, 74, 98, 122],\\n\\t    [6, 30, 54, 78, 102, 126],\\n\\t    [6, 26, 52, 78, 104, 130],\\n\\t    [6, 30, 56, 82, 108, 134],\\n\\t    [6, 34, 60, 86, 112, 138],\\n\\t    [6, 30, 58, 86, 114, 142],\\n\\t    [6, 34, 62, 90, 118, 146],\\n\\t    [6, 30, 54, 78, 102, 126, 150],\\n\\t    [6, 24, 50, 76, 102, 128, 154],\\n\\t    [6, 28, 54, 80, 106, 132, 158],\\n\\t    [6, 32, 58, 84, 110, 136, 162],\\n\\t    [6, 26, 54, 82, 110, 138, 166],\\n\\t    [6, 30, 58, 86, 114, 142, 170]\\n    ],\\n\\n    G15 : (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0),\\n    G18 : (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0),\\n    G15_MASK : (1 << 14) | (1 << 12) | (1 << 10)\\t| (1 << 4) | (1 << 1),\\n\\n    getBCHTypeInfo : function(data) {\\n\\t    var d = data << 10;\\n\\t    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\\n\\t\\t    d ^= (QRUtil.G15 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) ) ); \\t\\n\\t    }\\n\\t    return ( (data << 10) | d) ^ QRUtil.G15_MASK;\\n    },\\n\\n    getBCHTypeNumber : function(data) {\\n\\t    var d = data << 12;\\n\\t    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\\n\\t\\t    d ^= (QRUtil.G18 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) ) ); \\t\\n\\t    }\\n\\t    return (data << 12) | d;\\n    },\\n\\n    getBCHDigit : function(data) {\\n\\n\\t    var digit = 0;\\n\\n\\t    while (data != 0) {\\n\\t\\t    digit++;\\n\\t\\t    data >>>= 1;\\n\\t    }\\n\\n\\t    return digit;\\n    },\\n\\n    getPatternPosition : function(typeNumber) {\\n\\t    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\\n    },\\n\\n    getMask : function(maskPattern, i, j) {\\n\\t    \\n\\t    switch (maskPattern) {\\n\\t\\t    \\n\\t    case QRMaskPattern.PATTERN000 : return (i + j) % 2 == 0;\\n\\t    case QRMaskPattern.PATTERN001 : return i % 2 == 0;\\n\\t    case QRMaskPattern.PATTERN010 : return j % 3 == 0;\\n\\t    case QRMaskPattern.PATTERN011 : return (i + j) % 3 == 0;\\n\\t    case QRMaskPattern.PATTERN100 : return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 == 0;\\n\\t    case QRMaskPattern.PATTERN101 : return (i * j) % 2 + (i * j) % 3 == 0;\\n\\t    case QRMaskPattern.PATTERN110 : return ( (i * j) % 2 + (i * j) % 3) % 2 == 0;\\n\\t    case QRMaskPattern.PATTERN111 : return ( (i * j) % 3 + (i + j) % 2) % 2 == 0;\\n\\n\\t    default :\\n\\t\\t    throw new Error(\\\"bad maskPattern:\\\" + maskPattern);\\n\\t    }\\n    },\\n\\n    getErrorCorrectPolynomial : function(errorCorrectLength) {\\n\\n\\t    var a = new Polynomial([1], 0);\\n\\n\\t    for (var i = 0; i < errorCorrectLength; i++) {\\n\\t\\t    a = a.multiply(new Polynomial([1, math.gexp(i)], 0) );\\n\\t    }\\n\\n\\t    return a;\\n    },\\n\\n    getLengthInBits : function(mode, type) {\\n\\n\\t    if (1 <= type && type < 10) {\\n\\n\\t\\t    // 1 - 9\\n\\n\\t\\t    switch(mode) {\\n\\t\\t    case Mode.MODE_NUMBER \\t: return 10;\\n\\t\\t    case Mode.MODE_ALPHA_NUM \\t: return 9;\\n\\t\\t    case Mode.MODE_8BIT_BYTE\\t: return 8;\\n\\t\\t    case Mode.MODE_KANJI  \\t: return 8;\\n\\t\\t    default :\\n\\t\\t\\t    throw new Error(\\\"mode:\\\" + mode);\\n\\t\\t    }\\n\\n\\t    } else if (type < 27) {\\n\\n\\t\\t    // 10 - 26\\n\\n\\t\\t    switch(mode) {\\n\\t\\t    case Mode.MODE_NUMBER \\t: return 12;\\n\\t\\t    case Mode.MODE_ALPHA_NUM \\t: return 11;\\n\\t\\t    case Mode.MODE_8BIT_BYTE\\t: return 16;\\n\\t\\t    case Mode.MODE_KANJI  \\t: return 10;\\n\\t\\t    default :\\n\\t\\t\\t    throw new Error(\\\"mode:\\\" + mode);\\n\\t\\t    }\\n\\n\\t    } else if (type < 41) {\\n\\n\\t\\t    // 27 - 40\\n\\n\\t\\t    switch(mode) {\\n\\t\\t    case Mode.MODE_NUMBER \\t: return 14;\\n\\t\\t    case Mode.MODE_ALPHA_NUM\\t: return 13;\\n\\t\\t    case Mode.MODE_8BIT_BYTE\\t: return 16;\\n\\t\\t    case Mode.MODE_KANJI  \\t: return 12;\\n\\t\\t    default :\\n\\t\\t\\t    throw new Error(\\\"mode:\\\" + mode);\\n\\t\\t    }\\n\\n\\t    } else {\\n\\t\\t    throw new Error(\\\"type:\\\" + type);\\n\\t    }\\n    },\\n\\n    getLostPoint : function(qrCode) {\\n\\t    \\n\\t    var moduleCount = qrCode.getModuleCount();\\n\\t    \\n\\t    var lostPoint = 0;\\n\\t    \\n\\t    // LEVEL1\\n\\t    \\n\\t    for (var row = 0; row < moduleCount; row++) {\\n\\n\\t\\t    for (var col = 0; col < moduleCount; col++) {\\n\\n\\t\\t\\t    var sameCount = 0;\\n\\t\\t\\t    var dark = qrCode.isDark(row, col);\\n\\n\\t\\t\\t\\tfor (var r = -1; r <= 1; r++) {\\n\\n\\t\\t\\t\\t    if (row + r < 0 || moduleCount <= row + r) {\\n\\t\\t\\t\\t\\t    continue;\\n\\t\\t\\t\\t    }\\n\\n\\t\\t\\t\\t    for (var c = -1; c <= 1; c++) {\\n\\n\\t\\t\\t\\t\\t    if (col + c < 0 || moduleCount <= col + c) {\\n\\t\\t\\t\\t\\t\\t    continue;\\n\\t\\t\\t\\t\\t    }\\n\\n\\t\\t\\t\\t\\t    if (r == 0 && c == 0) {\\n\\t\\t\\t\\t\\t\\t    continue;\\n\\t\\t\\t\\t\\t    }\\n\\n\\t\\t\\t\\t\\t    if (dark == qrCode.isDark(row + r, col + c) ) {\\n\\t\\t\\t\\t\\t\\t    sameCount++;\\n\\t\\t\\t\\t\\t    }\\n\\t\\t\\t\\t    }\\n\\t\\t\\t    }\\n\\n\\t\\t\\t    if (sameCount > 5) {\\n\\t\\t\\t\\t    lostPoint += (3 + sameCount - 5);\\n\\t\\t\\t    }\\n\\t\\t    }\\n\\t    }\\n\\n\\t    // LEVEL2\\n\\n\\t    for (var row = 0; row < moduleCount - 1; row++) {\\n\\t\\t    for (var col = 0; col < moduleCount - 1; col++) {\\n\\t\\t\\t    var count = 0;\\n\\t\\t\\t    if (qrCode.isDark(row,     col    ) ) count++;\\n\\t\\t\\t    if (qrCode.isDark(row + 1, col    ) ) count++;\\n\\t\\t\\t    if (qrCode.isDark(row,     col + 1) ) count++;\\n\\t\\t\\t    if (qrCode.isDark(row + 1, col + 1) ) count++;\\n\\t\\t\\t    if (count == 0 || count == 4) {\\n\\t\\t\\t\\t    lostPoint += 3;\\n\\t\\t\\t    }\\n\\t\\t    }\\n\\t    }\\n\\n\\t    // LEVEL3\\n\\n\\t    for (var row = 0; row < moduleCount; row++) {\\n\\t\\t    for (var col = 0; col < moduleCount - 6; col++) {\\n\\t\\t\\t    if (qrCode.isDark(row, col)\\n\\t\\t\\t\\t\\t    && !qrCode.isDark(row, col + 1)\\n\\t\\t\\t\\t\\t    &&  qrCode.isDark(row, col + 2)\\n\\t\\t\\t\\t\\t    &&  qrCode.isDark(row, col + 3)\\n\\t\\t\\t\\t\\t    &&  qrCode.isDark(row, col + 4)\\n\\t\\t\\t\\t\\t    && !qrCode.isDark(row, col + 5)\\n\\t\\t\\t\\t\\t    &&  qrCode.isDark(row, col + 6) ) {\\n\\t\\t\\t\\t    lostPoint += 40;\\n\\t\\t\\t    }\\n\\t\\t    }\\n\\t    }\\n\\n\\t    for (var col = 0; col < moduleCount; col++) {\\n\\t\\t    for (var row = 0; row < moduleCount - 6; row++) {\\n\\t\\t\\t    if (qrCode.isDark(row, col)\\n\\t\\t\\t\\t\\t    && !qrCode.isDark(row + 1, col)\\n\\t\\t\\t\\t\\t    &&  qrCode.isDark(row + 2, col)\\n\\t\\t\\t\\t\\t    &&  qrCode.isDark(row + 3, col)\\n\\t\\t\\t\\t\\t    &&  qrCode.isDark(row + 4, col)\\n\\t\\t\\t\\t\\t    && !qrCode.isDark(row + 5, col)\\n\\t\\t\\t\\t\\t    &&  qrCode.isDark(row + 6, col) ) {\\n\\t\\t\\t\\t    lostPoint += 40;\\n\\t\\t\\t    }\\n\\t\\t    }\\n\\t    }\\n\\n\\t    // LEVEL4\\n\\t    \\n\\t    var darkCount = 0;\\n\\n\\t    for (var col = 0; col < moduleCount; col++) {\\n\\t\\t    for (var row = 0; row < moduleCount; row++) {\\n\\t\\t\\t    if (qrCode.isDark(row, col) ) {\\n\\t\\t\\t\\t    darkCount++;\\n\\t\\t\\t    }\\n\\t\\t    }\\n\\t    }\\n\\t    \\n\\t    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\\n\\t    lostPoint += ratio * 10;\\n\\n\\t    return lostPoint;\\t\\t\\n    }\\n};\\n\\nmodule.exports = QRUtil;\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{\"20175bfb210aa59bf75d\":function(t,e,r){var n=r(\"cde6d4d0393f6d84de73\");function o(t){this.mode=n.MODE_8BIT_BYTE,this.data=t}o.prototype={getLength:function(t){return this.data.length},write:function(t){for(var e=0;e<this.data.length;e++)t.put(this.data.charCodeAt(e),8)}},t.exports=o},\"42e14e05877199b91db4\":function(t,e,r){var n=r(\"e15adf893b054d9151fa\");function o(t,e){this.totalCount=t,this.dataCount=e}o.RS_BLOCK_TABLE=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],o.getRSBlocks=function(t,e){var r=o.getRsBlockTable(t,e);if(void 0==r)throw new Error(\"bad rs block @ typeNumber:\"+t+\"/errorCorrectLevel:\"+e);for(var n=r.length/3,i=new Array,s=0;s<n;s++)for(var a=r[3*s+0],u=r[3*s+1],h=r[3*s+2],f=0;f<a;f++)i.push(new o(u,h));return i},o.getRsBlockTable=function(t,e){switch(e){case n.L:return o.RS_BLOCK_TABLE[4*(t-1)+0];case n.M:return o.RS_BLOCK_TABLE[4*(t-1)+1];case n.Q:return o.RS_BLOCK_TABLE[4*(t-1)+2];case n.H:return o.RS_BLOCK_TABLE[4*(t-1)+3];default:return}},t.exports=o},\"51b6eeb64b886ad5f257\":function(t,e){function r(){this.buffer=new Array,this.length=0}r.prototype={get:function(t){var e=Math.floor(t/8);return 1==(this.buffer[e]>>>7-t%8&1)},put:function(t,e){for(var r=0;r<e;r++)this.putBit(1==(t>>>e-r-1&1))},getLengthInBits:function(){return this.length},putBit:function(t){var e=Math.floor(this.length/8);this.buffer.length<=e&&this.buffer.push(0),t&&(this.buffer[e]|=128>>>this.length%8),this.length++}},t.exports=r},\"892d994dd89134cc8a36\":function(t,e){for(var r={glog:function(t){if(t<1)throw new Error(\"glog(\"+t+\")\");return r.LOG_TABLE[t]},gexp:function(t){for(;t<0;)t+=255;for(;t>=256;)t-=255;return r.EXP_TABLE[t]},EXP_TABLE:new Array(256),LOG_TABLE:new Array(256)},n=0;n<8;n++)r.EXP_TABLE[n]=1<<n;for(n=8;n<256;n++)r.EXP_TABLE[n]=r.EXP_TABLE[n-4]^r.EXP_TABLE[n-5]^r.EXP_TABLE[n-6]^r.EXP_TABLE[n-8];for(n=0;n<255;n++)r.LOG_TABLE[r.EXP_TABLE[n]]=n;t.exports=r},\"9a85863363f2d2ebfa5f\":function(t,e,r){var n=r(\"20175bfb210aa59bf75d\"),o=r(\"42e14e05877199b91db4\"),i=r(\"51b6eeb64b886ad5f257\"),s=r(\"ea6f576f63758f294eb9\"),a=r(\"b6b06bfd4b1a75061749\");function u(t,e){this.typeNumber=t,this.errorCorrectLevel=e,this.modules=null,this.moduleCount=0,this.dataCache=null,this.dataList=[]}var h=u.prototype;h.addData=function(t){var e=new n(t);this.dataList.push(e),this.dataCache=null},h.isDark=function(t,e){if(t<0||this.moduleCount<=t||e<0||this.moduleCount<=e)throw new Error(t+\",\"+e);return this.modules[t][e]},h.getModuleCount=function(){return this.moduleCount},h.make=function(){if(this.typeNumber<1){var t=1;for(t=1;t<40;t++){for(var e=o.getRSBlocks(t,this.errorCorrectLevel),r=new i,n=0,a=0;a<e.length;a++)n+=e[a].dataCount;for(a=0;a<this.dataList.length;a++){var u=this.dataList[a];r.put(u.mode,4),r.put(u.getLength(),s.getLengthInBits(u.mode,t)),u.write(r)}if(r.getLengthInBits()<=8*n)break}this.typeNumber=t}this.makeImpl(!1,this.getBestMaskPattern())},h.makeImpl=function(t,e){this.moduleCount=4*this.typeNumber+17,this.modules=new Array(this.moduleCount);for(var r=0;r<this.moduleCount;r++){this.modules[r]=new Array(this.moduleCount);for(var n=0;n<this.moduleCount;n++)this.modules[r][n]=null}this.setupPositionProbePattern(0,0),this.setupPositionProbePattern(this.moduleCount-7,0),this.setupPositionProbePattern(0,this.moduleCount-7),this.setupPositionAdjustPattern(),this.setupTimingPattern(),this.setupTypeInfo(t,e),this.typeNumber>=7&&this.setupTypeNumber(t),null==this.dataCache&&(this.dataCache=u.createData(this.typeNumber,this.errorCorrectLevel,this.dataList)),this.mapData(this.dataCache,e)},h.setupPositionProbePattern=function(t,e){for(var r=-1;r<=7;r++)if(!(t+r<=-1||this.moduleCount<=t+r))for(var n=-1;n<=7;n++)e+n<=-1||this.moduleCount<=e+n||(this.modules[t+r][e+n]=0<=r&&r<=6&&(0==n||6==n)||0<=n&&n<=6&&(0==r||6==r)||2<=r&&r<=4&&2<=n&&n<=4)},h.getBestMaskPattern=function(){for(var t=0,e=0,r=0;r<8;r++){this.makeImpl(!0,r);var n=s.getLostPoint(this);(0==r||t>n)&&(t=n,e=r)}return e},h.createMovieClip=function(t,e,r){var n=t.createEmptyMovieClip(e,r);this.make();for(var o=0;o<this.modules.length;o++)for(var i=1*o,s=0;s<this.modules[o].length;s++){var a=1*s;this.modules[o][s]&&(n.beginFill(0,100),n.moveTo(a,i),n.lineTo(a+1,i),n.lineTo(a+1,i+1),n.lineTo(a,i+1),n.endFill())}return n},h.setupTimingPattern=function(){for(var t=8;t<this.moduleCount-8;t++)null==this.modules[t][6]&&(this.modules[t][6]=t%2==0);for(var e=8;e<this.moduleCount-8;e++)null==this.modules[6][e]&&(this.modules[6][e]=e%2==0)},h.setupPositionAdjustPattern=function(){for(var t=s.getPatternPosition(this.typeNumber),e=0;e<t.length;e++)for(var r=0;r<t.length;r++){var n=t[e],o=t[r];if(null==this.modules[n][o])for(var i=-2;i<=2;i++)for(var a=-2;a<=2;a++)this.modules[n+i][o+a]=-2==i||2==i||-2==a||2==a||0==i&&0==a}},h.setupTypeNumber=function(t){for(var e=s.getBCHTypeNumber(this.typeNumber),r=0;r<18;r++){var n=!t&&1==(e>>r&1);this.modules[Math.floor(r/3)][r%3+this.moduleCount-8-3]=n}for(r=0;r<18;r++){n=!t&&1==(e>>r&1);this.modules[r%3+this.moduleCount-8-3][Math.floor(r/3)]=n}},h.setupTypeInfo=function(t,e){for(var r=this.errorCorrectLevel<<3|e,n=s.getBCHTypeInfo(r),o=0;o<15;o++){var i=!t&&1==(n>>o&1);o<6?this.modules[o][8]=i:o<8?this.modules[o+1][8]=i:this.modules[this.moduleCount-15+o][8]=i}for(o=0;o<15;o++){i=!t&&1==(n>>o&1);o<8?this.modules[8][this.moduleCount-o-1]=i:o<9?this.modules[8][15-o-1+1]=i:this.modules[8][15-o-1]=i}this.modules[this.moduleCount-8][8]=!t},h.mapData=function(t,e){for(var r=-1,n=this.moduleCount-1,o=7,i=0,a=this.moduleCount-1;a>0;a-=2)for(6==a&&a--;;){for(var u=0;u<2;u++)if(null==this.modules[n][a-u]){var h=!1;i<t.length&&(h=1==(t[i]>>>o&1)),s.getMask(e,n,a-u)&&(h=!h),this.modules[n][a-u]=h,-1==--o&&(i++,o=7)}if((n+=r)<0||this.moduleCount<=n){n-=r,r=-r;break}}},u.PAD0=236,u.PAD1=17,u.createData=function(t,e,r){for(var n=o.getRSBlocks(t,e),a=new i,h=0;h<r.length;h++){var f=r[h];a.put(f.mode,4),a.put(f.getLength(),s.getLengthInBits(f.mode,t)),f.write(a)}var l=0;for(h=0;h<n.length;h++)l+=n[h].dataCount;if(a.getLengthInBits()>8*l)throw new Error(\"code length overflow. (\"+a.getLengthInBits()+\">\"+8*l+\")\");for(a.getLengthInBits()+4<=8*l&&a.put(0,4);a.getLengthInBits()%8!=0;)a.putBit(!1);for(;!(a.getLengthInBits()>=8*l)&&(a.put(u.PAD0,8),!(a.getLengthInBits()>=8*l));)a.put(u.PAD1,8);return u.createBytes(a,n)},u.createBytes=function(t,e){for(var r=0,n=0,o=0,i=new Array(e.length),u=new Array(e.length),h=0;h<e.length;h++){var f=e[h].dataCount,l=e[h].totalCount-f;n=Math.max(n,f),o=Math.max(o,l),i[h]=new Array(f);for(var g=0;g<i[h].length;g++)i[h][g]=255&t.buffer[g+r];r+=f;var d=s.getErrorCorrectPolynomial(l),c=new a(i[h],d.getLength()-1).mod(d);u[h]=new Array(d.getLength()-1);for(g=0;g<u[h].length;g++){var m=g+c.getLength()-u[h].length;u[h][g]=m>=0?c.get(m):0}}var p=0;for(g=0;g<e.length;g++)p+=e[g].totalCount;var v=new Array(p),B=0;for(g=0;g<n;g++)for(h=0;h<e.length;h++)g<i[h].length&&(v[B++]=i[h][g]);for(g=0;g<o;g++)for(h=0;h<e.length;h++)g<u[h].length&&(v[B++]=u[h][g]);return v},t.exports=u},b6b06bfd4b1a75061749:function(t,e,r){var n=r(\"892d994dd89134cc8a36\");function o(t,e){if(void 0==t.length)throw new Error(t.length+\"/\"+e);for(var r=0;r<t.length&&0==t[r];)r++;this.num=new Array(t.length-r+e);for(var n=0;n<t.length-r;n++)this.num[n]=t[n+r]}o.prototype={get:function(t){return this.num[t]},getLength:function(){return this.num.length},multiply:function(t){for(var e=new Array(this.getLength()+t.getLength()-1),r=0;r<this.getLength();r++)for(var i=0;i<t.getLength();i++)e[r+i]^=n.gexp(n.glog(this.get(r))+n.glog(t.get(i)));return new o(e,0)},mod:function(t){if(this.getLength()-t.getLength()<0)return this;for(var e=n.glog(this.get(0))-n.glog(t.get(0)),r=new Array(this.getLength()),i=0;i<this.getLength();i++)r[i]=this.get(i);for(i=0;i<t.getLength();i++)r[i]^=n.gexp(n.glog(t.get(i))+e);return new o(r,0).mod(t)}},t.exports=o},cde6d4d0393f6d84de73:function(t,e){t.exports={MODE_NUMBER:1,MODE_ALPHA_NUM:2,MODE_8BIT_BYTE:4,MODE_KANJI:8}},e15adf893b054d9151fa:function(t,e){t.exports={L:1,M:0,Q:3,H:2}},ea6f576f63758f294eb9:function(t,e,r){var n=r(\"cde6d4d0393f6d84de73\"),o=r(\"b6b06bfd4b1a75061749\"),i=r(\"892d994dd89134cc8a36\"),s=0,a=1,u=2,h=3,f=4,l=5,g=6,d=7,c={PATTERN_POSITION_TABLE:[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],G15:1335,G18:7973,G15_MASK:21522,getBCHTypeInfo:function(t){for(var e=t<<10;c.getBCHDigit(e)-c.getBCHDigit(c.G15)>=0;)e^=c.G15<<c.getBCHDigit(e)-c.getBCHDigit(c.G15);return(t<<10|e)^c.G15_MASK},getBCHTypeNumber:function(t){for(var e=t<<12;c.getBCHDigit(e)-c.getBCHDigit(c.G18)>=0;)e^=c.G18<<c.getBCHDigit(e)-c.getBCHDigit(c.G18);return t<<12|e},getBCHDigit:function(t){for(var e=0;0!=t;)e++,t>>>=1;return e},getPatternPosition:function(t){return c.PATTERN_POSITION_TABLE[t-1]},getMask:function(t,e,r){switch(t){case s:return(e+r)%2==0;case a:return e%2==0;case u:return r%3==0;case h:return(e+r)%3==0;case f:return(Math.floor(e/2)+Math.floor(r/3))%2==0;case l:return e*r%2+e*r%3==0;case g:return(e*r%2+e*r%3)%2==0;case d:return(e*r%3+(e+r)%2)%2==0;default:throw new Error(\"bad maskPattern:\"+t)}},getErrorCorrectPolynomial:function(t){for(var e=new o([1],0),r=0;r<t;r++)e=e.multiply(new o([1,i.gexp(r)],0));return e},getLengthInBits:function(t,e){if(1<=e&&e<10)switch(t){case n.MODE_NUMBER:return 10;case n.MODE_ALPHA_NUM:return 9;case n.MODE_8BIT_BYTE:case n.MODE_KANJI:return 8;default:throw new Error(\"mode:\"+t)}else if(e<27)switch(t){case n.MODE_NUMBER:return 12;case n.MODE_ALPHA_NUM:return 11;case n.MODE_8BIT_BYTE:return 16;case n.MODE_KANJI:return 10;default:throw new Error(\"mode:\"+t)}else{if(!(e<41))throw new Error(\"type:\"+e);switch(t){case n.MODE_NUMBER:return 14;case n.MODE_ALPHA_NUM:return 13;case n.MODE_8BIT_BYTE:return 16;case n.MODE_KANJI:return 12;default:throw new Error(\"mode:\"+t)}}},getLostPoint:function(t){for(var e=t.getModuleCount(),r=0,n=0;n<e;n++)for(var o=0;o<e;o++){for(var i=0,s=t.isDark(n,o),a=-1;a<=1;a++)if(!(n+a<0||e<=n+a))for(var u=-1;u<=1;u++)o+u<0||e<=o+u||0==a&&0==u||s==t.isDark(n+a,o+u)&&i++;i>5&&(r+=3+i-5)}for(n=0;n<e-1;n++)for(o=0;o<e-1;o++){var h=0;t.isDark(n,o)&&h++,t.isDark(n+1,o)&&h++,t.isDark(n,o+1)&&h++,t.isDark(n+1,o+1)&&h++,0!=h&&4!=h||(r+=3)}for(n=0;n<e;n++)for(o=0;o<e-6;o++)t.isDark(n,o)&&!t.isDark(n,o+1)&&t.isDark(n,o+2)&&t.isDark(n,o+3)&&t.isDark(n,o+4)&&!t.isDark(n,o+5)&&t.isDark(n,o+6)&&(r+=40);for(o=0;o<e;o++)for(n=0;n<e-6;n++)t.isDark(n,o)&&!t.isDark(n+1,o)&&t.isDark(n+2,o)&&t.isDark(n+3,o)&&t.isDark(n+4,o)&&!t.isDark(n+5,o)&&t.isDark(n+6,o)&&(r+=40);var f=0;for(o=0;o<e;o++)for(n=0;n<e;n++)t.isDark(n,o)&&f++;return r+=10*(Math.abs(100*f/e/e-50)/5)}};t.exports=c}}]);","extractedComments":[]}